Given an array arr of n positive integers and a number k. One can apply a swap 
operation on the array any number of times, i.e choose any two index i and j (i < j) 
and swap arr[i] , arr[j] . Find the minimum number of swaps required to bring all 
the numbers less than or equal to k together, i.e. make them a contiguous subarray.

Example 1:
Input : 
arr[ ] = {2, 1, 5, 6, 3} 
K = 3
Output : 
1
Explanation:
To bring elements 2, 1, 3 together, swap index 2 with 4 (0-based indexing),
i.e. element arr[2] = 5 with arr[4] = 3 such that final array will be- arr[] = {2, 1, 3, 6, 5}


Approach: tc:O(n)  sc:O(1)
This is an indirect qn we need to understand
here in the qn it was mentioned that we need to find the minimum no of swaps to have elements less than k
together with window size =k
first we findout all the elements less than k(count) in the curr window, now the min swaps req would be k-count
ie. the unfav elements(elements greater than k) need to be swapped.



Solution: tc:O(n)  sc:O(
public static int minSwap (int arr[], int n, int k) {
        int count=0,i=0,j=0,fav=0,unfav,minswaps=Integer.MAX_VALUE;
        for(int l=0;l<n;l++){
            if(arr[l]<=k)
                count++;
        }
        while(j<n){
            if(arr[j]<=k)fav++;
            if((j-i+1) <=count){                
                j++;
            }
            else{
                if(arr[i]<=k)fav--;
                i++;               
                j++;
            }
            minswaps=((count-fav)<minswaps)?(count-fav):(minswaps);
        }
        return minswaps;
    }
