https://practice.geeksforgeeks.org/problems/largest-subarray-of-0s-and-1s/1/?page=1&status%5b%5d=solved&category%5b%5d=sliding-window&sortBy=submissions


Given an array of 0s and 1s. Find the length of the largest subarray with equal number of 0s and 1s.

Example 1:

Input:
N = 4
A[] = {0,1,0,1}
Output: 4

Input:
N = 5
A[] = {0,0,1,0,0}
Output: 2

Approach:
1. when 1 comes add 1 to sum and 0 comes add -1 to sum and store these in hm.
2. If hm already contains the sum that means the longest subarray is started from 
     position of cursum to I.
     
Solution:  tc:O(n)   sc:O(n)
int maxLen(int[] arr, int N)
    {
       Map<Integer,Integer> map = new HashMap<>();
       map.put(0,-1);
       int res = 0,cumSum=0;
       for(int i=0;i<arr.length;++i) {
           cumSum = arr[i]==1 ? cumSum+1 : cumSum-1;
           if(map.containsKey(cumSum)) res = Math.max(res,i-map.get(cumSum));
           else map.put(cumSum,i);
       }
       return res;
    }
