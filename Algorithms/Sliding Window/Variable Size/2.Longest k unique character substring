https://practice.geeksforgeeks.org/problems/longest-k-unique-characters-substring0853/1#

iven a string you need to print the size of the longest possible substring that has exactly K unique characters. 
If there is no possible substring then print -1.


Input:
S = "aabacbebebe", K = 3
Output: 7
Explanation: "cbebebe" is the longest substring with K distinct characters.


Approach:
1.whenever the number of character in the hm hit k(3)  store size of sliding window (j-i+1) repeat the process and return largest size 
2. Increment i when size of hm is greater than k . Increment j for every iteration.


Solution: sc: O(n) tc:O(2*n)=O(n)
class Solution {
    public int longestkSubstr(String s, int k) {

        HashMap<Character,Integer> m=new HashMap<>();
        int i=0,j=0,maxlen=-1;
        
        while(j<s.length()){
            char c=s.charAt(j);
            
            if(m.containsKey(c))
               m.put(c,m.get(c)+1);
            else
               m.put(c,1);

            if(m.size()==k)
                maxlen=((j-i+1)>maxlen)?(j-i+1):(maxlen);
            
            while(m.size()>k){
                 char ck=s.charAt(i);
                 if(m.get(ck)==1)
                     m.remove(ck);
                 else
                     m.put(ck,m.get(ck)-1);
                 i++;
            }
            j++;
        }
        return maxlen;
    }
}
