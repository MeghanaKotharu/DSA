https://leetcode.com/problems/odd-even-linked-list/

Given the head of a singly linked list, group all the nodes with odd indices 
  together followed by the nodes with even indices, and return the reordered list.
The first node is considered odd, and the second node is even, and so on.

ex:  head = [1,2,3,4,5]
o/p: [1,3,5,2,4]

Approach:      sc-O(n)    tc-O(n)
1.Keep all the odd nodes in result node first using a fast pointer
2.Keep all the remaining even nodes again into result node

Solution:    
class Solution {
    public ListNode oddEvenList(ListNode head) {        
        if(head==null || head.next==null ) return head;
        
        ListNode result=new ListNode();
        ListNode fast=head,slow=head.next,res=result;
        
        while(fast!=null && fast.next!=null){
            res.val=fast.val;
            
            fast=fast.next.next;
            res.next=new ListNode();
            res=res.next;      
        }
        

        if(fast!=null){
            res.val=fast.val;
            res.next=new ListNode();
            res=res.next;  
        }
        
        while(slow!=null && slow.next!=null){
            res.val=slow.val;
            slow=slow.next.next;
            if(slow!=null){
                 res.next=new ListNode();
                 res=res.next;
            } 
        }
        if(slow!=null) res.val=slow.val;
        return result;
    }
}

Approach2:   sc-O(1)    tc-O(n)
1.Keep a pointer for odd and even nodes and a head for even node as evenhead.
2.Now change the next of odd pointer to odd.next.next same with even pointer.
3.Move the odd and even pointer to next.
4.At last all the even and odd pointers will be together you need to connect them
   connect the odd values end to evenhead.

Solution:

class Solution {
    public ListNode oddEvenList(ListNode head) {
        if (head == null) return null;
        ListNode odd = head;
        ListNode even = head.next;
        ListNode evenHead = head.next;
        // `even != null` rules out the list of only 1 node
        // `even.next != null` rules out the list of only 2 nodes
        while (even != null && even.next != null) {
            // Put odd to the odd list
            odd.next = odd.next.next;
            
            // Put even to the even list
            even.next = even.next.next;
            
            // Move the pointer to the next odd/even
            odd = odd.next;
            even = even.next;
        }
        odd.next = evenHead;
        return head;
    }
}
