https://leetcode.com/problems/swap-nodes-in-pairs/

Given a linked list, swap every two adjacent nodes and return its head. You must solve the 
problem without modifying the values in the list's nodes (i.e., only nodes themselves may be changed.)

Input: head = [1,2,3,4]
Output: [2,1,4,3]

Input: head = [1]
Output: [1]

Approach:
1.Create a dummy node and add it before head.
         0->1->2->3->4      prev=0    curr=1    temp=curr.next  (2)
     Now change prev.next to curr.next(temp)   ie.  0->2
     Also add temp.next=curr     ie.  2->1
     Add the remaining part of ll ie 3->4 to curr.next   curr.next=temp.next     
     final ll now is    0->2->1->3->4     prev=0 curr=1
     
     Now change the prev  pointer to 2 steps prev=1 and curr to 1 step prev=1 curr=3
         


Solution:
class Solution {
    public ListNode swapPairs(ListNode head) {        
        if(head==null || head.next==null) return head;
        
        ListNode curr=head,prev,temp;
        ListNode dummy=new ListNode(0);
        dummy.next=head;
        prev=dummy;
        
        while(curr!=null && curr.next!=null){
        
            temp=curr.next;
            prev.next=temp;            
            curr.next=temp.next;
            temp.next=curr;
            
            curr=curr.next;
            prev=prev.next.next;            
        }
        head=dummy.next;
        return head;
    }
}
