https://leetcode.com/problems/maximum-twin-sum-of-a-linked-list/

In a linked list of size n, where n is even, the ith node (0-indexed) of the linked list is known 
    as the twin of the (n-1-i)th node, if 0 <= i <= (n / 2) - 1.
For example, if n = 4, then node 0 is the twin of node 3, and node 1 is the twin of node 2. 
    These are the only nodes with twins for n = 4.
The twin sum is defined as the sum of a node and its twin.

Given the head of a linked list with even length, return the maximum twin sum of the linked list.

ex:  [5,4,2,1]    o/p:6

Explanation: 
Nodes 0 and 1 are the twins of nodes 3 and 2, respectively. All have twin sum = 6.
There are no other nodes with twins in the linked list.
Thus, the maximum twin sum of the linked list is 6. 

Approach:
From the question we can understand that we need to add one element from first and 
     one element from last and give maximum sum.
1.First we traverse till the middle of LL and reverse all the elements from there(mid+1) till the end
     (Similar to palindrome sum in LL available in easy)
2.Now we keep one pointer at the mid+1(fast) position and another at starting
3.Traverse till the fast pointer reaches end and add slow +fast and store max value.


Solution:

class Solution {
    public int pairSum(ListNode head) {
        ListNode temp,fast=head,slow=head,prev=null,t;
        int max=Integer.MIN_VALUE;
        
        //reaching the middle
        while(fast.next!=null && fast.next.next!=null){
            fast=fast.next.next;
            slow=slow.next;
        }
        t=slow;         //storing mid index
        slow=slow.next;
        

        //reverse of second half 
        while(slow!=null){
            temp=slow.next;
            slow.next=prev;
            prev=slow;
            slow=temp;
        }
        fast=prev;
        t.next=prev;  // adding reversed second half to the mid index
        
        slow=head;
        while(fast!=null){
            if(max<fast.val+slow.val)    max=fast.val+slow.val;
            fast=fast.next;
            slow=slow.next; 
        }
        return max;
    }
}
