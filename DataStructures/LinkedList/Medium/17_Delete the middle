https://leetcode.com/problems/delete-the-middle-node-of-a-linked-list/

Delete the middle of a LL where by checking the index as 0.
Input: head = [1,3,4,7,1,2,6]
Output: [1,3,4,1,2,6]

Approach:
1.Count the size of LL.
2.Move till you reach the count/2-1 position
         count/2     makes you reach middle position (indexing starts with 1)
         count/2-1   makes you reach middle position  (indexing starts with 0)
3.Just reach before count/2-1 so that you can remove middle position using prev.

Solution:  tc:O(n)  sc:O(1)
class Solution {
    public ListNode deleteMiddle(ListNode head) {
        int count=0,i=0,k;
        ListNode temp=head;
        if(head==null || head.next==null) return null;
        
        //counted the size of LL
        while(temp!=null){
            count++;
            temp=temp.next;
        }
        
        temp=head;
        k=(count/2)-1;   //bez the indexing starts from 0 
        
        //traversing till the index of before middle
        while(i<k){
            temp=temp.next;
            i++;
        }
        
        //removing next element.
        temp.next=temp.next.next;
        return head;
    }
}
