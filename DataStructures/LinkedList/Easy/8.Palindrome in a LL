https://leetcode.com/problems/palindrome-linked-list/

Given the head of a singly linked list, return true if it is a palindrome.
ex:   1->2->->2->1        o/p:True

Approach:
1. we reverse the second half of the linkedlist to check the values 
           for that we need to traverse till the middle part   (done using f-s pointers)
           reverse all the elements from the middle+1 position
2.Check if the elements are same or not again with one pointer from head and another from middle+1 pos

what happens when we reverse?
   1->2->2->1       becomes    1->2->1->2 
   
Note:
1.This also works for odd and even LL (it's mandatory to always check whether our solution works for odd and even LL
2.While moving the f-s pointers Incase of even no of nodes in LL the fast pointer won't reach the last element so we check the condition for fast.next.next!=null
     1->2->2->1     then fast will end at 2 and we shouldn't move it to 2.next.next as there is null
     for odd    1->2->->2->1->3     then fast will reach 3 and stops as fast.next==null

Solution: O(3*n) =O(n) sc=O(1)
class Solution {
    public boolean isPalindrome(ListNode head) {
        ListNode fast=head,slow=head,temp,prev=null,t;
        
        if(head==null || head.next==null) return true;
        
        //get the middle of the LL by using f-s pointers
        while(fast.next!=null && fast.next.next!=null){
            slow=slow.next;
            fast=fast.next.next;
        }
        
        //reverse the LL from second half ie from middle +1 position
        t=slow;
        slow=slow.next;
        while(slow!=null){
            temp=slow.next;
            slow.next=prev;
            prev=slow;
            slow=temp;
        }
        t.next=prev;
        t=t.next;
        
        //check with 2 pointers one from starting and second one from middle+1 position
        //if the values didn't match it means its not a palindrome
        temp=head;
        while(t!=null){
            if(temp.val!=t.val) return false;
            temp=temp.next;
            t=t.next;
        }
        return true;
    }
}
