https://leetcode.com/problems/binary-search/

Given an array of integers nums which is sorted in ascending order, and an integer target, 
write a function to search target in nums. If target exists, then return its index. 
Otherwise, return -1.

You must write an algorithm with O(log n) runtime complexity.

Example 1:

Input: nums = [-1,0,3,5,9,12], target = 9
Output: 4
Explanation: 9 exists in nums and its index is 4

Solution:

//recursive
class Solution {
    public int search(int[] nums, int target) {
        int s=0,e=nums.length-1;
        int ans=binarySearch(nums,target,s,e);
        return ans;
    }
    public int binarySearch(int[] nums, int target, int s, int e){
        if(s<=nums.length-1 && e>=s){           
            int mid=e+(s-e)/2;
            if(nums[mid]==target)
                return mid;
            else if(nums[mid]<target)
                return binarySearch(nums,target,mid+1,e);
            else if(nums[mid]>target)
                return binarySearch(nums,target,s,mid-1);
        }
        return -1;
    }
}

//iterative
class Solution {
  public int search(int[] nums, int target) {
    int pivot, left = 0, right = nums.length - 1;
    
    while (left <= right) {
    
      pivot = left + (right - left) / 2;
      
      if (nums[pivot] == target) return pivot;
      if (target < nums[pivot]) right = pivot - 1;
      else left = pivot + 1;
    }
    return -1;
  }
}
