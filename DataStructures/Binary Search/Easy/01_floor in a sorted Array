https://practice.geeksforgeeks.org/problems/floor-in-a-sorted-array-1587115620/1/#

Given a sorted array arr[] of size N without duplicates, and given a value x. 
Floor of x is defined as the largest element K in arr[] such that K is smaller 
than or equal to x. Find the index of K(0-based indexing).

Example 1:

Input:
N = 7, x = 0 
arr[] = {1,2,8,10,11,12,19}
Output: -1
Explanation: No element less than 0 is found. So output is "-1".

Example 2:

Input:
N = 7, x = 5 
arr[] = {1,2,8,10,11,12,19}
Output: 1
Explanation: Largest Number less than 5 is 2 (i.e K = 2), whose index is 1(0-based indexing).

Approach:
1.we move until we find the element at mid and return it.
2.Incase we didn't find the element it means we have reached start>end 
  then we find if arr[e]<x then we return it else arr[s]<x then we return it
3. If nothing satisfies we return -1.

Solution:
  static int findFloor(long arr[], int n, long x){
        int s=0,e=n-1,mid,res=-1;
        while(s<=e){
            mid=s+(e-s)/2;
            if(arr[mid]==x) 
                return mid;
            else if(arr[mid]>x)
                e=mid-1;
            else
              s=mid+1;
        }

        if(e>=0 && arr[e]<x) return e;
        else if(s<n && arr[s]<x) return s;
        return -1;
    }
