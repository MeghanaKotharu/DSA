https://practice.geeksforgeeks.org/problems/stock-span-problem-1587115621/1/#


The stock span problem is a financial problem where we have a series of n daily price quotes for a stock and 
we need to calculate the span of stocks price for all n days. 
The span Si of the stocks price on a given day i is defined as the maximum number of consecutive days just before 
the given day, for which the price of the stock on the current day is less than or equal to its price on the given day.
For example, if an array of 7 days prices is given as {100, 80, 60, 70, 60, 75, 85}, then the span values for 
corresponding 7 days are {1, 1, 1, 2, 1, 4, 6}.

Here according to problem we need to find the next smallest element on left and give the distance of those elements.

Approach:
1.Push elements one by one into the stack
2.if stack is empty then simply add 1 to the result array.
3.Else add i-s.peek() bez it gives the number of elements less than curr ele in array

Solution:  tc:O(n)  sc:O(n)
class Solution{
    public static int[] calculateSpan(int price[], int n)
    {
        Stack<Integer> s=new Stack<>();
        int a[]=new int[n];
        a[0] = 1;
        s.push(0);
        for(int i=1;i<n;i++){
            while(!s.isEmpty() && price[s.peek()]<=price[i])
                s.pop();
            if(!s.isEmpty()) a[i]=i-s.peek();
            else a[i]=i+1;
            s.push(i);
        }
        return a;
    }
    
}
