https://practice.geeksforgeeks.org/problems/next-larger-element-1587115620/1/?page=2&category[]=Stack&sortBy=submissions#

Input: 
N = 4, arr[] = [1 3 2 4]
Output:        
3 4 4 -1
Explanation:
Find out the next greater element (Immediate) for each and every element

Approach: tc: O(2*n)= O(n)   sc:O(n)
We can't sort the array as we need to find the immediate greater element to every element(not largest).

1.Store each element u move in a stack.
2.As we need to find element greater on right we start traverse from left.
3.If the curr ele is greater than stack top remove all elements on stack until all the 
     elements less than or equal to stack are removed.
4.If stack top is greater than curr ele then add stack top to res.
5.If stack is empty it means there is no greater element than curr element so add -1 to result.



class Solution
{
    public static long[] nextLargerElement(long[] arr, int n)
    { 
        // Your code here
        Stack <Long> s=new Stack<Long>();
        long a[]=new long[n];
        
        for(int i=n-1;i>=0;i--){
        
            if(s.isEmpty())
                a[i]=-1;
                
            else if(s.peek()>arr[i])
                a[i]=s.peek();
                
            else if(s.peek()<=arr[i] && (!s.isEmpty())){
                while((!s.isEmpty()) && s.peek()<=arr[i])
                    s.pop();
                a[i]=(!s.isEmpty())?(s.peek()):(-1);
            }
            
            s.push(arr[i]);
        }
        return a;
    } 
}

