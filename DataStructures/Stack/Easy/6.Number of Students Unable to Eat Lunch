https://leetcode.com/problems/number-of-students-unable-to-eat-lunch/

The school cafeteria offers circular and square sandwiches at lunch break, referred to by numbers 0 and 1 respectively. 
     All students stand in a queue. Each student either prefers square or circular sandwiches.
The number of sandwiches in the cafeteria is equal to the number of students. The sandwiches are placed in a stack. At each step:

If the student at the front of the queue prefers the sandwich on the top of the stack, they will take it and leave the queue.
Otherwise, they will leave it and go to the queue's end.
This continues until none of the queue students want to take the top sandwich and are thus unable to eat.

You are given two integer arrays students and sandwiches where sandwiches[i] is the type of the i​​​​​​th 
sandwich in the stack (i = 0 is the top of the stack) and students[j] is the preference of the j​​​​​​th student 
in the initial queue (j = 0 is the front of the queue). Return the number of students that are unable to eat.

 

Example 1:
Input: students = [1,1,0,0], sandwiches = [0,1,0,1]
Output: 0 

Example 2:

Input: students = [1,1,1,0,0,1], sandwiches = [1,0,0,0,1,1]
Output: 3

Approach:
Instead of concentrating on people who dont eat find out how many ate so that you can simply find out who didnt see hint if you didnt understand this.
        
      -->  k is used to keep track of no of students who are not eating that top sandwitch
           if k equals q.size() it means no student in the queue wants to eat top sandwich which means no one can eat sandwiches anymore so break. 
             (condition: student can take food from top of stack).
      --> when someone eats that top sandwich just make the k to 0.
      
Hint:Calculate those who will eat instead of those who will not.

Solution:
class Solution {
    public int countStudents(int[] students, int[] sandwiches) {
        Stack<Integer> st=new Stack <>();
        Queue<Integer> q = new ArrayDeque();
        int k=0,count=0;
        
        for(int i=sandwiches.length-1;i>=0;i--)  st.push(sandwiches[i]);
        for(int i=0;i<students.length;i++) q.add(students[i]);
        

        while(q.size()!=k){           
            if(st.peek()==q.peek()){
                q.remove();
                st.pop();
                count++;
                k=0;
            }
            else{
                q.add(q.remove());
                k++;
            }
        }
        return Math.abs(students.length-count);
    }
}
