https://leetcode.com/problems/remove-all-adjacent-duplicates-in-string/

You are given a string s consisting of lowercase English letters. A duplicate removal 
           consists of choosing two adjacent and equal letters and removing them.
We repeatedly make duplicate removals on s until we no longer can.

ex: s="abbaca"    o/p:"ca" 
1.aaca  when both b are removed 
2.ca

Approach:(Naive)
1.We can do this by using 2 for loops as the 1st loop runs till 0-n
2.second loop runs till i+1 to n we make changes in the same string so that it would be easy to check 
adjacent values.

Approach:(Using Stack)
1.If stack top doesn't contain the same element as curr element then we push it into stack.
2.Else we remove top of the stack

Note:Iterator access stack from start only so no need to reverse res again.

Solution:

class Solution {
    public String removeDuplicates(String s) {
        Stack<Character> st=new Stack<>();
        StringBuilder sb=new StringBuilder();
        
        for(int i=0;i<s.length();i++){
            if(!st.empty() && st.peek()!=s.charAt(i))
                 st.push(s.charAt(i));
            else if(!st.empty() && st.peek()==s.charAt(i)) st.pop();
            else if(st.empty()) st.push(s.charAt(i));
        }   
        
        Iterator it=st.iterator();
        while(it.hasNext())          
            sb.append(it.next());
        return sb.toString();
    }
}
