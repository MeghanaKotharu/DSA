https://practice.geeksforgeeks.org/problems/minimum-cost-of-ropes-1587115620/1/?page=1&category[]=Heap&sortBy=submissions#

There are given N ropes of different lengths, we need to connect these ropes into one rope. 
The cost to connect two ropes is equal to sum of their lengths. The task is to connect the ropes with minimum cost.

Example 1:

Input:
n = 4
arr[] = {4, 3, 2, 6}
Output: 
29
Explanation:
For example if we are given 4 ropes of lengths 4, 3, 2 and 6. We can connect the ropes in following ways.
1) First connect ropes of lengths 2 and 3. Now we have three ropes of lengths 4, 6 and 5.
2) Now connect ropes of lengths 4 and 5. Now we have two ropes of lengths 6 and 9.
3) Finally connect the two ropes and all ropes have connected.
Total cost for connecting all ropes is 5 + 9 + 15 = 29. 
This is the optimized cost for connecting ropes. 

Other ways would be more or equal but not less 

Note: if you observe the minimum cost is obtained by adding the smallest 2 ropes possible in the group.

Approach:
1. Add elements to the heap and always check the top 2 smallest ropes.
2. Remove them from the heap add them into sum and push it into the heap again.

Solution:
class Solution
{
    //Function to return the minimum cost of connecting the ropes.
    long minCost(long arr[], int n) 
    {
        // your code here
        PriorityQueue <Long> minheap=new PriorityQueue<>();
        long p,q,sum=0;
        for(int i=0;i<n;i++){
            minheap.add(arr[i]);
        }
        while(minheap.size()>1){
            p=minheap.poll();
            q=minheap.poll();
            sum+=p+q;
            minheap.add(p+q);
        }
        return sum;
    }
}
